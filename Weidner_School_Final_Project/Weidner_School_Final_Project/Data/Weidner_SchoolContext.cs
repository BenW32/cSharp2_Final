// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Weidner_School_Final_Project.Models;

#nullable disable

namespace Weidner_School_Final_Project.Data
{
    public partial class Weidner_SchoolContext : DbContext
    {
        public Weidner_SchoolContext()
        {
        }

        public Weidner_SchoolContext(DbContextOptions<Weidner_SchoolContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<AssignmentsStudent> AssignmentsStudents { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CoursesStudent> CoursesStudents { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<Student> Students { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Assignment>(entity =>
            {
                entity.Property(e => e.AssignmentId).HasColumnName("Assignment_Id");

                entity.Property(e => e.AssignmentDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Assignment_Description")
                    .IsFixedLength(true);

                entity.Property(e => e.AssignmentDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Assignment_Due_Date");

                entity.Property(e => e.AssignmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Assignment_Name")
                    .IsFixedLength(true);

                entity.Property(e => e.CourseId).HasColumnName("Course_Id");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Assignments)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Course_Id");
            });

            modelBuilder.Entity<AssignmentsStudent>(entity =>
            {
                entity.HasKey(e => e.AssignmentsStudentsId)
                    .HasName("PK__Assignme__973946C7BEC162BA");

                entity.ToTable("Assignments_Students");

                entity.Property(e => e.AssignmentsStudentsId).HasColumnName("Assignments_Students_Id");

                entity.Property(e => e.AssignmentId).HasColumnName("Assignment_Id");

                entity.Property(e => e.StudentId).HasColumnName("Student_Id");

                entity.HasOne(d => d.Assignment)
                    .WithMany(p => p.AssignmentsStudents)
                    .HasForeignKey(d => d.AssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Assignment_Id");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.AssignmentsStudents)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Student_Id");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.Property(e => e.CourseId).HasColumnName("Course_Id");

                entity.Property(e => e.CourseDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Course_Description")
                    .IsFixedLength(true);

                entity.Property(e => e.CourseName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Course_Name")
                    .IsFixedLength(true);

                entity.Property(e => e.InstructorId).HasColumnName("Instructor_Id");

                entity.HasOne(d => d.Instructor)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.InstructorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Instructor_Id");
            });

            modelBuilder.Entity<CoursesStudent>(entity =>
            {
                entity.HasKey(e => e.CoursesStudentsId)
                    .HasName("PK__Courses___36057B574F2B5D4D");

                entity.ToTable("Courses_Students");

                entity.Property(e => e.CoursesStudentsId).HasColumnName("Courses_Students_Id");

                entity.Property(e => e.CourseId).HasColumnName("Course_Id");

                entity.Property(e => e.StudentId).HasColumnName("Student_Id");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CoursesStudents)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Course_Id2");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.CoursesStudents)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Student_Id2");
            });

            modelBuilder.Entity<Instructor>(entity =>
            {
                entity.Property(e => e.InstructorId).HasColumnName("Instructor_Id");

                entity.Property(e => e.InstructorAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Address")
                    .IsFixedLength(true);

                entity.Property(e => e.InstructorEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Email");

                entity.Property(e => e.InstructorFirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Firstname")
                    .IsFixedLength(true);

                entity.Property(e => e.InstructorLastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Lastname")
                    .IsFixedLength(true);

                entity.Property(e => e.InstructorPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Password");

                entity.Property(e => e.InstructorPhone)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Instructor_Phone")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.StudentId).HasColumnName("Student_Id");

                entity.Property(e => e.StudentAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Student_Address")
                    .IsFixedLength(true);

                entity.Property(e => e.StudentEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Student_Email");

                entity.Property(e => e.StudentFirstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Student_Firstname")
                    .IsFixedLength(true);

                entity.Property(e => e.StudentLastname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Student_Lastname")
                    .IsFixedLength(true);

                entity.Property(e => e.StudentPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Student_Password");

                entity.Property(e => e.StudentPhone)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Student_Phone")
                    .IsFixedLength(true);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}